09:53 12/05/2025

c++ notes

header guards
	#ifndef SOME_UNIQUE_NAME_HERE
	#define SOME_UNIQUE_NAME_HERE
	if the unique name has been defined before, it will be ignored. If not it will be included. This prevents doubling the unique name that can link to a header file with the same methods or classes or so.

Define macros: DEBUG
	#ifdef DEBUG
        	std::cout << "In global non-neutral \n";
	#endif
	if the macro DEBUG is defined, the code will be executed

using namespace std;

Type inference in c++: auto and decltype = automatic deduction of the data type of an expression 
	auto: 
		tidies up the code by shortening what the compiler already knows:
		instead of "std::set<std::string>::iterator it = st.begin()" one can write "auto it = st.begin()"
	
pointer
	this -> m is an abbreviation for (*this).m
		other ways to use this within a struct or class
			void set_directly (int new_m) {m = new_m; } // ohne this
			void set_this1 (int new_m) {this[0].m = new_m;} // a pointer is an array and can be used like one
			void set_this2 (int new_m) {(*this).m = new_m;} // explicit
			void set_this3 (int new_m) {this -> m = new_m;} // newer operator 
		in all cases did we change m to new_m
		m_species = new Species* [xdim]; Species* points towards the species class, thus defines the type of data that will be stored in the array being allocated
		creates an array, where each element is a pointer
		m_species: m stands for member, because it is a member_variable
		this-> is a pointer and points towards the current object instance
	a more complete example for pointer
		m_species = new Species* [xdim];  // here an array of pointers is created. This can be recognized by "*"
		for (col = 0, col < xdim, col++) {m_species[col] = new Species [ydim];} // for each pointer, we assign an arrays of actual "Species" without pointing "*".
											// I must assign "Species", because m_species is an array of pointers towards Species, hence, expects that class.
	pointer and &x = &x gives the adress of x. This adress can be assigned to a pointer only.
	another example
		int x = 5;
		int y = 6;
		int* p; // declare a pointer. The pointer is not assingned to anything yet
		p = &x; // assigning the adress of x to p. Now p points to x
		p = &y; // re-assigning the adress of y to p. Now p points to y and the link to x is broken
		p* = 10 // this makes y = 10
reference
	must be bounded at initialization: int x = 5; int &r = x; // r is now a synonym for x
		
		
reference variable vs pointer
	1) a pointer can be reassigned (see: pointer.another example), a reference not (see: reference)
	2) â pointer variable has its own identity and size with an own memory adress (can be measured with sizeof operator). The same operation on a reference variable will return the same, as if applied to the referenced variable
	3) it is possible to create a pointer to a pointer "int **pp" but not a pointer to a reference "int &*pr"
	4) it is possible to create an array of pointers "int ap*[] = " but not of references
	5) infinite nesting of pointers is possible:
		int x = 0;
		int y = 0;
		int p* = &x;
		int q* = &y;
		int **pp = &p;
		**pp = 2; // x = 2
		pp = &q;
		**pp = 4;  // y = 4. *pp gives q and **pp gives the value of q = 4
	6) ...
	8) a pointer to a class/struct uses -> to access its members, while a reference uses .
	

struct vs class
	
& vs * vs ->
	adress-of operator return a memory adress of a variable. Instead *something is a dereference operator, which instead of the adress returns a value
		again, a pointer needs to be dereferenced (*) to get to the value it points towards, while a reference can be accessed directly
	A pointer to a pointer expects to receive a memory address of a pointer, not a raw integer value. The compiler will likely issue an error if **pp = *p. The correct way is **pp = &p

arrays
	[] indicate an array

set
	is a class template from std (STL) that stores unique elements in a sorted order
	set<string> st;  means that the set will store elements of type std::string
	st.insert({"A","B","A"}); insert is a member method() from the class "set" and adds new elements to the set
		second A will not be inserted, because its a duplicate
	for (auto it = st.begin(); it != st.end(); it++) cout << *it << " ";  // st.begin() return an an iterator pointing towards the first element of the set (iterator = more general then an index and used to navigate through various types of containers. It works like a pointer)

std::make_pair(0, 0)
	makes a key-value pair from the given arguments
	auto p = std::make_pair("A", 1);
	std::cout << p.first << p.second << std::endl;

instance
	an instance of a class is a specific, concrete objected created from that class
	a member function is called on an instance

this -> = special type of pointer
	within non static member functions (like a constructor) "this" points automatically and implicitly to the specific instance of the class on which the member function is being called. It value is determined by the object(=instance) that invoked the function.
	i think: when defining methods within classes, "this" stands for modification of the object that is created when applying the function. x <- functionxy(y) -- in this case "this" relates to x

void = the function doesn't return any value

constructor = Landscape::Landscape(int xsize, …){ ...}
	characteristic: have the same name as the class itself -> the compiler so recognizes it as a constructore
	doesnt return a value or something like a function does
	it returns the newly created object

destructor = Landscape::~Landscape() {...}
	is called before the object is being destroyed to perform any necessary clean up before removing the object from memory
	
delete[] = is an operator to destroy array and non-array(pointers) objects which are dynamically created by the new operator
new = is used for dynamic memory allocation which stores variables on heap memory

heap memory = is allocated dynamically and is not freed automatically when a function ends
	Instead it must be manually deallocated
	when an object is created it is stored in heap, while references to this object are stored in stack
	costlier then handling the stack frame
	heap memory is larger then stack memory

stack memory = allocation and de-all. is done automatically by compiler

class = a class can contain functions and variables and are typically defined in header files e.g. species.hpp : class Species {private ... public }
	the functions can be accessed via GlobalEnvironment::reproduce(...)
	the functions are declared in the header file

friend class
	friend class and friend functions can access the private and protected member of other functions
	defined by: class Geeks {friend class CFG;} class CFG{...;}
friend function
	they are not member function of the class
	but can access private and protected members of that class
	can be a
		global function
			declaration
				class base {private: {...}, protected {...}, public {...} friend void friendFunction(base& obj);}
			definition
				void friendFunction(base& obj) {here then can be defined the access to private or protected members of the base class}
		member function of another class as friend functions
			...https://www.geeksforgeeks.org/friend-class-function-cpp/...
			
overloading
	define multiple operators with the same name but with different functions depending on the fed input
	it is a form of compile time polymorphism
	function overloading
		is triggered by different parameter lists
			number of params: void print(int x); void print(int x, int y);
			class of params: void print (char x);
			order of params: void print (char x, int y); void print(int y, char x);
		care: the return type alone (void) is not enough. The compiler decides on which overload to use, when the function is called and the return type is not part of the call signature
	operator overloading
		in standard c++ the compiler knows how to use + when adding two ints. However, when we define our custom classes like a complex number, the compiler doesn't know how to add those classes
		Operator overloading allows to define that behavoiur
		uses the "operator" keyword followed by the symbol we want to overload: operator+
		
		

header files =
	contains declarations of functions: class GlobalEnvironment { … 
		virtual void reproduce(unsigned int generation); … } 

inheritance = inherit attributes and methods from one class to another
	to inherit a class use "class child : public parent"
	child = derived class
	parent = base class

Access specifiers = define how the members (attributes and methods, i.e., variables and functions) of a class can be accessed
	public = can be accessed and modified from outside the code
	private = members cannot be accessed or viewed from outside the class
		Why would you hide members
	protected = like private. But, members can be accessed through inherited classes
	

virtual functions = impacts the behaviour of a function
	1) enables runtime polymorphism (=dynamic dispatch) (I think polymorphism means that the functions responds differently depending on the object type)
		when calling a virtual function through a pointer or a reference to a base class, the actual function that gets executed is determined by the class of the objected pointed to or referenced at runtime, not the type of pointer or reference itself
		e.g. in class animal there is a virtual function
			animal::makesound()
		and deriveed classes: dog and cat that override makesound() to bark and meow
		a pointer animal* coud point either to dog or cat
		if makesound() is virtual and the pointer points to a dog:
			calling "animalPtr -> makesound()" will execute bark
	2) Allowing overriding in derived classes
		i think 1) says this implicitly: a derived class (dog, cat) can override the makesound() function
	3) ensuring proper function call in inheritance classes
		