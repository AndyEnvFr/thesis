---
title: "Phylo Sim exploration of density dependence"
format: html
editor: visual
---

Here, I check the relationship between the *density* param and the species richness. Also, seed dispersal = (1, global). For this purpose the frequency of the output must not be every 50 generations for 100k generations.

```{r}
#| warning: false
library(PhyloSim)
library(parallel)
source("~/cyber_synch/git_synch/scripts/functions.R")
```

### define params and run model

```{r}
#| eval: true
#| echo: false

# Define parameter values
density_va <- seq(0, 1.5, 0.5)
dispersal_options <- list(1, "global")  # Using a list to preserve types
densityCut_options <- c(1,2,3,4,5)

# Initialize empty list for parameters
params <- list()
param_index <- 1

# Nested loops for all combinations
for (density in density_va) {
  for (disp_idx in 1:length(dispersal_options)) {
    for (cut in densityCut_options) {
      # Get dispersal value with proper type
      dispersal <- dispersal_options[[disp_idx]]
      
      # Format scenario names
      scenario_density <- gsub("\\.", "-", as.character(density))
      scenario_dispersal <- ifelse(identical(dispersal, "global"), "G", dispersal)
      scenario_cut <- gsub("\\.", "-", as.character(cut))
      
      # Create parameter set
      params[[param_index]] <- createCompletePar(
        x = 256,
        y = 256,
        density = density,
        dispersal = dispersal,  # Now using the properly typed variable
        specRate = 2,
        environment = 0,
        fitnessBaseMortalityRatio = 1, 
        densityCut = cut,
        seed = 20250414,
        type = "base",
        protracted = 0,
        fission = 0,
        redQueen = 0,
        redQueenStrength = 0,
        airmat = NA,
        fitnessActsOn = "mortality",
        runs = rep(1:500 * 200),
        scenario = paste0("dd",
                        scenario_density,
                        "_disp",
                        scenario_dispersal,
                        "_sr2_e0_m1_cut",
                        scenario_cut)
      )
      
      # Increment parameter index
      param_index <- param_index + 1
    }
  }
}
```

# run parallel

The implemented simulation batch function has no option to save interim results. Computation can still be paralleled in a safe way:

```{r}
run_save_batch(params = params,
               save_path = "~/cyber_synch/local/runs/slim/",
               cores = 30,
               slim = TRUE)
```
```{r}
error <- readRDS("../../local/runs/slim/ERROR5.rds")
error
```

