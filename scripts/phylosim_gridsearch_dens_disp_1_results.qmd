---
title: "Phylo Sim exploration of density dependence"
format: html
editor: visual
---

Here, I check the relationship between the *density* param and the species richness. Also, seed dispersal = (1, global). For this purpose the frequency of the output must not be every 50 generations for 100k generations.

```{r}
#| warning: false
library(PhyloSim)
library(parallel)
source("~/Uni/Master/MA/git_synch/scripts/functions.R")
```

### define params and run model

```{r}
#| eval: true
#| echo: false

# loop creates parameter set

params <- list()
density_va <- seq(0,2,.25)
density_val <- rep(density_va,2)
dispersal_val <- c(as.list(rep(1,length(density_va))),
                   as.list(rep("global",length(density_va))))
scenario_density <- gsub("\\.", "-", as.character(density_val))
scenario_dispersal <- gsub("global", "G", as.character(dispersal_val))

for (i in 1:length(density_val)) {
  params[[i]] <- createCompletePar(x = 256,
                          y = 256,
                          density = density_val[i],
                          dispersal = dispersal_val[[i]],
                          specRate = 2,
                          environment = 0,
                          fitnessBaseMortalityRatio = 1, 
                          densityCut = 1,
                          seed = 20250414,
                          type = "base",
                          protracted = 0,
                          fission = 0,
                          redQueen = 0,
                          redQueenStrength = 0,
                          airmat = NA,
                          fitnessActsOn = "mortality",
                          runs = rep(1:150 * 500),
                          scenario = paste0("dd",
                                            scenario_density[i],
                                            "_disp",
                                            scenario_dispersal[i],
                                            "_sr2_e0_m1_cut1")
  )
  }
```

# run parallel

The implemented simulation batch function has no option to save interim results. Computation can still be paralleled in a safe way:

```{r}
run_save_batch(params = params,
               save_path = "~/cyber_synch/local/runs/slim/",
               cores = 30,
               slim = TRUE)
```

# read in output
```{r}
flist <- list.files("~/Uni/Master/MA/local/runs/slim/", full.names = TRUE)

# function for sorting the runs from lowest to highest density
extract_dd_value <- function(x) {
  num_part <- gsub("^dd([0-9.-]+)_.*", "\\1", x)
  num_part <- gsub("-", ".", num_part)  # Convert hyphen to decimal point
  as.numeric(num_part)
}

sort_flist <- flist[order(sapply(filenames, extract_dd_value))]
runs <- lapply(sort_flist, function(x) readRDS(file = x))
filenames <- sub(pattern = ".*dd", replacement = "dd",x = sort_flist)
names(runs) <- filenames
all(names(runs) == sapply(X = runs, FUN = function(x) x$Model$scenario))
```
```{r}
sapply(runs,function(x) spec_time(sim_out = x))
```


