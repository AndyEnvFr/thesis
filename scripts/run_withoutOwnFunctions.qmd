---
title: "Phylo Sim exploration of density dependence"
format: html
editor: visual
---

Here, I check the relationship between the *density* param and the species richness. Also, seed dispersal = (1, global). For this purpose the frequency of the output must not be every 50 generations for 100k generations.

```{r}
#| warning: false
library(PhyloSim)
library(parallel)
source("~/cyber_synch/git_synch/scripts/functions.R")
```

### define params and run model

```{r}
#| eval: true
#| echo: false

# Define parameter values
density_options <- c(0,1)
dispersal_options <- list(1, "global")  # Using a list to preserve types
densityCut_options <- c(1,2)

# Initialize empty list for parameters
params <- list()
param_index <- 1

# Nested loops for all combinations
for (density in density_options) {
  for (disp_idx in 1:length(dispersal_options)) {
    for (cut in densityCut_options) {
      # Get dispersal value with proper type
      dispersal <- dispersal_options[[disp_idx]]
      
      # Format scenario names
      scenario_density <- gsub("\\.", "-", as.character(density))
      scenario_dispersal <- ifelse(identical(dispersal, "global"), "G", dispersal)
      scenario_cut <- gsub("\\.", "-", as.character(cut))
      
      # Create parameter set
      params[[param_index]] <- createCompletePar(
        x = 50,
        y = 50,
        density = density,
        dispersal = dispersal,  # Now using the properly typed variable
        specRate = 2,
        environment = 0,
        fitnessBaseMortalityRatio = 1, 
        densityCut = cut,
        seed = 20250414,
        type = "base",
        protracted = 0,
        fission = 0,
        redQueen = 0,
        redQueenStrength = 0,
        airmat = NA,
        fitnessActsOn = "mortality",
        runs = rep(1:20 * 100),
        scenario = paste0("dd",
                        scenario_density,
                        "_disp",
                        scenario_dispersal,
                        "_sr2_e0_m1_cut",
                        scenario_cut)
      )
      
      # Increment parameter index
      param_index <- param_index + 1
    }
  }
}
```

# run parallel

```{r}
runs <- runSimulationBatch(params, parallel = 8)
```
```{r}
namelist <- numeric()
for (i in 1:length(params)) {
  name <- paste0(
    "dd",
    (ifelse(runs[[i]]$Model$density == TRUE, "T", "F")),
    "_disp",
    (ifelse(is.numeric(runs[[i]]$Model$dispersal), "1", "G")),
    "_cut",
    runs[[i]]$Model$densityCut
  )
  namelist[i] <- name
}

mat_list <- list()
for (i in 1:length(runs)) {
  mat_list[[i]] <- runs[[i]]$Output[[20]]$specMat
}
names(mat_list) <- namelist

sum(mat_list[["ddF_disp1_cut1"]] != mat_list[["ddF_disp1_cut2"]])
sum(mat_list[["ddF_disp1_cut1"]] != mat_list[["ddF_dispG_cut1"]])
sum(mat_list[["ddF_disp1_cut1"]] != mat_list[["ddF_dispG_cut2"]])
sum(mat_list[["ddF_dispG_cut1"]] != mat_list[["ddF_dispG_cut2"]])
sum(mat_list[["ddF_dispG_cut1"]] != mat_list[["ddT_dispG_cut1"]])
sum(mat_list[["ddF_dispG_cut2"]] != mat_list[["ddT_dispG_cut2"]])
sum(mat_list[["ddF_disp1_cut1"]] != mat_list[["ddT_disp1_cut1"]])
sum(mat_list[["ddT_disp1_cut1"]] != mat_list[["ddT_dispG_cut1"]])
sum(mat_list[["ddT_disp1_cut1"]] != mat_list[["ddT_disp1_cut2"]])
sum(mat_list[["ddT_dispG_cut1"]] != mat_list[["ddT_dispG_cut2"]])
```
densityCut makes no difference at all.
density(0,1) only differ in global scenario, however, no difference in cut:
*sum(mat_list[["ddF_dispG_cut1"]] != mat_list[["ddT_dispG_cut1"]])
[1] 2212
sum(mat_list[["ddF_dispG_cut2"]] != mat_list[["ddT_dispG_cut2"]])
[1] 2212*




