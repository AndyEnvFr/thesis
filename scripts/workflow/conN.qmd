---
title: "conN: a function for calculating the conspecific neighbourhood density"
author: "ai"
format: html
editor: visual
---

optimized version because it operates with matrix addition instead of looping through every focal cell

# load

```{r}
#| warning: false
library(PhyloSim)
library(parallel)
source("~/cyber_synch/git_synch/scripts/functions.R")
# source("~/Uni/Master/MA/git_synch/scripts/functions.R")
```

```{r}
runs <- readRDS("~/cyber_synch/local/runs/fat/20250602_05")

# runs <- readRDS("~/Uni/Master/MA/local/runs/fat/20250520_mortality")
```

# get names

```{r}
nm <- run_name(runs = runs, batch = TRUE)
names(runs) <- nm
```

# get mortMat, idMat and torus

```{r}
# by default when computing the torus mort and id mat will be calculated
# also, the generations will get the name of the run (e.g., if 40 generations
# are runned until year 200000, then the last generation = run$output["200000"]
# keep in mind that from now on, the matrices are not of original size any longer
runz <- torus_batch(runs, overwrite = TRUE, max_neighborhood_radius = NULL)
```

# transform matrix in df
```{r}

# Run in parallel

cl <- makeCluster(length(runz)) # make cluster with core nb

# export cluster with necessary functions
clusterExport(cl, c("runz", "get_con_neigh", "get_circular_offsets"))

parallel_function <- function(run){
  offset <- get_circular_offsets(neigh_radius = run$Model$densityCut)
  result <- get_con_neigh(run = run, radius = run$Model$densityCut)
  return(result)
}

#
runz <- parLapply(cl, X = runz, fun = parallel_function)
saveRDS(runz, "~/cyber_synch/local/runs/fat/20250602_05_conN")
```

