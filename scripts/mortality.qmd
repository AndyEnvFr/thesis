---
title: "generates a batch to compare mortality values"
format: html
editor: visual
---

```{r}
#| warning: false
library(PhyloSim)
library(parallel)
# source("~/cyber_synch/git_synch/scripts/functions.R")
source("~/Uni/Master/MA/git_synch/scripts/functions.R")
```

### define params and run model

```{r}
#| eval: true
#| echo: false

# Define parameter values
density_options <- c(0,1,2)
dispersal_options <- list(1, "global")  # Using a list to preserve types
densityCut_options <- c(1,4)
fitnessBaseMortalityRatio_options <- c(1, 10)  # Adding options for fitnessBaseMortalityRatio

# Initialize empty list for parameters
params <- list()
param_index <- 1

# Nested loops for all combinations
for (density in density_options) {
  for (disp_idx in 1:length(dispersal_options)) {
    for (cut in densityCut_options) {
      for (fbmr in fitnessBaseMortalityRatio_options) {  # New loop for fitnessBaseMortalityRatio
        # Get dispersal value with proper type
        dispersal <- dispersal_options[[disp_idx]]
        
        # Format scenario names
        scenario_density <- gsub("\\.", "-", as.character(density))
        scenario_dispersal <- ifelse(identical(dispersal, "global"), "G", dispersal)
        scenario_cut <- gsub("\\.", "-", as.character(cut))
        scenario_fbmr <- gsub("\\.", "-", as.character(fbmr))
        
        # Create parameter set
        params[[param_index]] <- createCompletePar(
          x = 50,
          y = 50,
          density = density,
          dispersal = dispersal,  # Using the properly typed variable
          specRate = 2,
          environment = 0,
          fitnessBaseMortalityRatio = fbmr,  # Now using the loop variable
          densityCut = cut,
          seed = 20250414,
          type = "base",
          protracted = 0,
          fission = 0,
          redQueen = 0,
          redQueenStrength = 0,
          airmat = NA,
          fitnessActsOn = "mortality",
          runs = sort(c((rep(1:20 * 1000) + 1), rep(1:20 * 1000))),
          scenario = paste0("dd",
                          scenario_density,
                          "_disp",
                          scenario_dispersal,
                          "_sr2_e0_m",
                          scenario_fbmr,  # Including fbmr in scenario name
                          "_cut",
                          scenario_cut)
        )
        
        # Increment parameter index
        param_index <- param_index + 1
      }
    }
  }
}
```

# run parallel

The implemented simulation batch function has no option to save interim results. Computation can still be paralleled in a safe way:

```{r}
runs <- runSimulationBatch(pars = params, parallel = 5)
saveRDS(runs, file = "~/Uni/Master/MA/local/runs/fat/20250520_mortality")
```

```{r}
# read in with proper names
# mortality_runs <- readRDS("~/cyber_synch/local/runs/fat/20250430_mortality")
names <- sapply(mortality_runs, function(x) x$Model$scenario)
names(mortality_runs) <- names
nameshort <- paste0( "mort = ", sub(".*m([0-9]+).*", replacement = "\\1", x = names))
```

```{r}
runs_mortmat <- mortality_batch(mortality_runs) # (if batch run: mortality_batch)
```

```{r}
#| fig-height: 8
#| fig-width: 16

par(mfrow = c(2,4))
sapply(runs_mortmat, function(x) image(x$Output[[40]]$specMat, main = x$Model$scenario))
sapply(runs_mortmat, function(x) image(x$Output[[39]]$traitMat, main = x$Model$scenario))
sapply(runs_mortmat, function(x) image(x$Output[[40]]$traitMat, main = x$Model$scenario))
sapply(runs_mortmat, function(x) image(x$Output[[40]]$mortMat, main = x$Model$scenario))
```

```{r}
resultmat <- matrix(NA, nrow = 20, ncol = 8)

for (i in 1:(length(runs_mortmat[[1]]$Output)/2)) {
  j <- i * 2
  resultmat[i,] <- sapply(runs_mortmat, function(x) sum(x$Output[[j]]$mortMat))
}

matplot(resultmat, lwd = 2, type = "l", lty = 1)
legend("bottomleft", legend = nameshort, col = c(1:length(names)), lwd = 2, bty = "n", ncol = 2)

colMeans(resultmat)
```
